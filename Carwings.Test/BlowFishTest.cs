using System.Linq;

using Carwings.ApiClient;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Carwings.Test
{
    [TestClass]
    public class BlowFishTest
    {
        private readonly uint[] plaintextL = 
        {
           0x00000000u, 0xffffffffu, 0x10000000u, 0x11111111u, 0x11111111u, 0x01234567u, 0x00000000u, 0x01234567u, 
           0x01a1d6d0u, 0x5cd54ca8u, 0x0248d438u, 0x51454b58u, 0x42fd4430u, 0x059b5e08u, 0x0756d8e0u, 0x762514b8u, 
           0x3bdd1190u, 0x26955f68u, 0x164d5e40u, 0x6b056e18u, 0x004bd6efu, 0x480d3900u, 0x437540c8u, 0x072d43a0u,
           0x02fe5577u, 0x1d9d5c50u, 0x30553228u, 0x01234567u, 0x01234567u, 0x01234567u, 0xffffffffu, 0x00000000u,
           0x00000000u, 0xffffffffu,
           
           0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 
           0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 
           0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u, 0xfedcba98u
        };

        private readonly uint[] plaintextR = 
        {
            0x00000000u, 0xffffffffu, 0x00000001u, 0x11111111u, 0x11111111u, 0x89abcdefu, 0x00000000u, 0x89abcdefu, 
            0x39776742u, 0x3def57dau, 0x06f67172u, 0x2ddf440au, 0x59577fa2u, 0x51cf143au, 0x774761d2u, 0x29bf486au, 
            0x49372802u, 0x35af609au, 0x4f275232u, 0x759f5ccau, 0x09176062u, 0x6ee762f2u, 0x698f3cfau, 0x77075292u, 
            0x8117f12au, 0x18f728c2u, 0x6d6f295au, 0x89abcdefu, 0x89abcdefu, 0x89abcdefu, 0xffffffffu, 0x00000000u, 
            0x00000000u, 0xffffffffu, 
            
            0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 
            0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u,
            0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u, 0x76543210u
        };

        private readonly byte[][] variableKey = 
        {
           new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
           new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
           new byte[] { 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
           new byte[] { 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 },
           new byte[] { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef },
           new byte[] { 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 },
           new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
           new byte[] { 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 },
           new byte[] { 0x7c, 0xa1, 0x10, 0x45, 0x4a, 0x1a, 0x6e, 0x57 },
           new byte[] { 0x01, 0x31, 0xd9, 0x61, 0x9d, 0xc1, 0x37, 0x6e },
           new byte[] { 0x07, 0xa1, 0x13, 0x3e, 0x4a, 0x0b, 0x26, 0x86 },
           new byte[] { 0x38, 0x49, 0x67, 0x4c, 0x26, 0x02, 0x31, 0x9e },
           new byte[] { 0x04, 0xb9, 0x15, 0xba, 0x43, 0xfe, 0xb5, 0xb6 },
           new byte[] { 0x01, 0x13, 0xb9, 0x70, 0xfd, 0x34, 0xf2, 0xce },
           new byte[] { 0x01, 0x70, 0xf1, 0x75, 0x46, 0x8f, 0xb5, 0xe6 },
           new byte[] { 0x43, 0x29, 0x7f, 0xad, 0x38, 0xe3, 0x73, 0xfe },
           new byte[] { 0x07, 0xa7, 0x13, 0x70, 0x45, 0xda, 0x2a, 0x16 },
           new byte[] { 0x04, 0x68, 0x91, 0x04, 0xc2, 0xfd, 0x3b, 0x2f },
           new byte[] { 0x37, 0xd0, 0x6b, 0xb5, 0x16, 0xcb, 0x75, 0x46 },
           new byte[] { 0x1f, 0x08, 0x26, 0x0d, 0x1a, 0xc2, 0x46, 0x5e },
           new byte[] { 0x58, 0x40, 0x23, 0x64, 0x1a, 0xba, 0x61, 0x76 },
           new byte[] { 0x02, 0x58, 0x16, 0x16, 0x46, 0x29, 0xb0, 0x07 },
           new byte[] { 0x49, 0x79, 0x3e, 0xbc, 0x79, 0xb3, 0x25, 0x8f },
           new byte[] { 0x4f, 0xb0, 0x5e, 0x15, 0x15, 0xab, 0x73, 0xa7 },
           new byte[] { 0x49, 0xe9, 0x5d, 0x6d, 0x4c, 0xa2, 0x29, 0xbf },
           new byte[] { 0x01, 0x83, 0x10, 0xdc, 0x40, 0x9b, 0x26, 0xd6 },
           new byte[] { 0x1c, 0x58, 0x7f, 0x1c, 0x13, 0x92, 0x4f, 0xef },
           new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
           new byte[] { 0x1f, 0x1f, 0x1f, 0x1f, 0x0e, 0x0e, 0x0e, 0x0e },
           new byte[] { 0xe0, 0xfe, 0xe0, 0xfe, 0xf1, 0xfe, 0xf1, 0xfe },
           new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
           new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
           new byte[] { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef },
           new byte[] { 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 }
        };

        private readonly byte[] setKey = { 0xf0, 0xe1, 0xd2, 0xc3, 0xb4, 0xa5, 0x96, 0x87, 0x78, 0x69, 0x5a, 0x4b, 0x3c, 0x2d, 0x1e, 0x0f, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };

        private readonly uint[] cipherTextL = 
        {
            0x4ef99745u, 0x51866fd5u, 0x7d856f9au, 0x2466dd87u, 0x61f9c380u, 0x7d0cc630u, 0x4ef99745u, 0x0aceab0fu, 
            0x59c68245u, 0xb1b8cc0bu, 0x1730e577u, 0xa25e7856u, 0x353882b1u, 0x48f4d088u, 0x432193b7u, 0x13f04154u, 
            0x2eedda93u, 0xd887e039u, 0x5f99d04fu, 0x4a057a3bu, 0x452031c1u, 0x7555ae39u, 0x53c55f9cu, 0x7a8e7bfau, 
            0xcf9c5d7au, 0xd1abb290u, 0x55cb3774u, 0xfa34ec48u, 0xa7907951u, 0xc39e072du, 0x014933e0u, 0xf21e9a77u, 
            0x24594688u, 0x6b5c5a9cu, 
            
            0xf9ad597cu, 0xe91d21c1u, 0xe9c2b70au, 0xbe1e6394u, 0xb39e4448u, 0x9457aa83u, 0x8bb77032u, 0xe87a244eu, 
            0x15750e7au, 0x122ba70bu, 0x3a833c9au, 0x9409da87u, 0x884f8062u, 0x1f85031cu, 0x79d9373au, 0x93142887u,
            0x03429e83u, 0xa4299e27u, 0xafd5aed1u, 0x10851c0eu, 0xe6f51ed7u, 0x64a6e14au, 0x80c7d7d4u, 0x05044b62u
        };

        private readonly uint[] cipherTextR = 
        {
           0x6198dd78u, 0xb85ecb8au, 0x613063f2u, 0x8b963c9du, 0x2281b096u, 0xafda1ec7u, 0x6198dd78u, 0xc6a0a28du, 
           0xeb05282bu, 0x250f09a0u, 0x8bea1da4u, 0xcf2651ebu, 0x09ce8f1au, 0x4c379918u, 0x8951fc98u, 0xd69d1ae5u, 
           0xffd39c79u, 0x3c2da6e3u, 0x5b163969u, 0x24d3977bu, 0xe4fada8eu, 0xf59b87bdu, 0xb49fc019u, 0x937e89a3u, 
           0x4986adb5u, 0x658bc778u, 0xd13ef201u, 0x47b268b2u, 0x08ea3caeu, 0x9fac631du, 0xcdaff6e4u, 0xb71c49bcu, 
           0x5754369au, 0x5d9e0a5au, 
           
           0x49db005eu, 0xd961a6d6u, 0x1bc65cf3u, 0x08640f05u, 0x1bdb1e6eu, 0xb1928c0du, 0xf960629du, 0x2cc85e82u, 
           0x4f4ec577u, 0x3ab64ae0u, 0xffc537f6u, 0xa90f6bf2u, 0x5060b8b4u, 0x19e11968u, 0x714ca34fu, 0xee3be15cu,
           0x8ce2d14bu, 0x469ff67bu, 0xc1bc96a8u, 0x3858da9fu, 0x9b9db21fu, 0xfd36b46fu, 0x5a5479adu, 0xfa52d080u
        };

        [TestMethod]
        public void TestVariableKeys()
        {
            for (var variableKeyIndex = 0; variableKeyIndex < variableKey.Length; variableKeyIndex++)
            {
                var blowfish = new Blowfish(variableKey[variableKeyIndex]);

                var l = plaintextL[variableKeyIndex];
                var r = plaintextR[variableKeyIndex];

                blowfish.BlowfishEncipher(ref l, ref r);

                Assert.AreEqual(cipherTextL[variableKeyIndex], l);
                Assert.AreEqual(cipherTextR[variableKeyIndex], r);
            }
        }

        [TestMethod]
        public void TestSetKey()
        {
            for (var setKeyIndex = variableKey.Length; setKeyIndex < plaintextL.Length; setKeyIndex++)
            {
                var blowfish = new Blowfish(setKey.Take(setKeyIndex - variableKey.Length + 1).ToArray());

                var l = plaintextL[setKeyIndex];
                var r = plaintextR[setKeyIndex];

                blowfish.BlowfishEncipher(ref l, ref r);

                Assert.AreEqual(cipherTextL[setKeyIndex], l);
                Assert.AreEqual(cipherTextR[setKeyIndex], r);
            }
        }
    }
}
